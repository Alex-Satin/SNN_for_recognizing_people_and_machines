# ‚úÖ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –∑ COCO –ø—ñ–¥ 5 –∫–ª–∞—Å—ñ–≤ (–∑ –æ–Ω–ª–∞–π–Ω-–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –∑–æ–±—Ä–∞–∂–µ–Ω—å)

import os
import random
import shutil
import requests
from tqdm import tqdm
from collections import defaultdict
from pycocotools.coco import COCO

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
ANNOTATION_FILE = 'annotations/instances_train2017.json'  # –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ —Ä–æ–∑–ø–∞–∫—É–π
COCO_IMAGES_URL = 'http://images.cocodataset.org/train2017/'  # URL –∑–æ–±—Ä–∞–∂–µ–Ω—å
OUTPUT_DIR = 'coco_balanced_dataset_new'
TARGET_CLASSES = ['car', 'truck', 'bus', 'motorcycle', 'person']
TARGET_OBJECTS_PER_CLASS = 500  # –º—ñ–Ω—ñ–º—É–º 200, –±–∞–∂–∞–Ω–æ 500
SPLIT_RATIO = {'train': 0.7, 'val': 0.2, 'test': 0.1}

# === –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ ===
os.makedirs(OUTPUT_DIR, exist_ok=True)
for split in ['train', 'val', 'test']:
    os.makedirs(os.path.join(OUTPUT_DIR, 'images', split), exist_ok=True)
    os.makedirs(os.path.join(OUTPUT_DIR, 'labels', split), exist_ok=True)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è COCO ===
coco = COCO(ANNOTATION_FILE)
class_name_to_id = {cls: coco.getCatIds(catNms=[cls])[0] for cls in TARGET_CLASSES}
class_id_to_index = {v: i for i, v in enumerate(class_name_to_id.values())}

# === –í–∏–±—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
img_to_anns = defaultdict(list)
used_img_ids = set()
class_instance_counts = defaultdict(int)

print("\nüîç –í–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ COCO...")

for class_name in TARGET_CLASSES:
    cat_id = class_name_to_id[class_name]
    img_ids = coco.getImgIds(catIds=[cat_id])
    random.shuffle(img_ids)

    for img_id in img_ids:
        if class_instance_counts[class_name] >= TARGET_OBJECTS_PER_CLASS:
            break

        ann_ids = coco.getAnnIds(imgIds=[img_id], catIds=[cat_id], iscrowd=False)
        anns = coco.loadAnns(ann_ids)
        if not anns:
            continue

        if img_id in used_img_ids:
            continue

        used_img_ids.add(img_id)
        img_info = coco.loadImgs(img_id)[0]
        img_file = img_info['file_name']
        img_w, img_h = img_info['width'], img_info['height']

        ann_ids_all = coco.getAnnIds(imgIds=[img_id], iscrowd=False)
        anns_all = coco.loadAnns(ann_ids_all)

        yolo_lines = []
        class_ids_in_image = set()
        for ann in anns_all:
            cid = ann['category_id']
            if cid not in class_id_to_index:
                continue
            yolo_cls = class_id_to_index[cid]
            bbox = ann['bbox']
            x_c = (bbox[0] + bbox[2]/2) / img_w
            y_c = (bbox[1] + bbox[3]/2) / img_h
            w = bbox[2] / img_w
            h = bbox[3] / img_h
            yolo_lines.append(f"{yolo_cls} {x_c:.6f} {y_c:.6f} {w:.6f} {h:.6f}")
            class_ids_in_image.add(coco.loadCats(cid)[0]['name'])

        # –æ–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É
        for cls in class_ids_in_image:
            if cls in class_instance_counts:
                class_instance_counts[cls] += 1

        img_to_anns[img_file] = yolo_lines

print("\nüìä –û–±'—î–∫—Ç–∏ –ø–æ –∫–ª–∞—Å–∞—Ö:")
for cls in TARGET_CLASSES:
    print(f"{cls:12s}: {class_instance_counts[cls]}")

# === –†–æ–∑–ø–æ–¥—ñ–ª –Ω–∞ train/val/test
img_files = list(img_to_anns.keys())
random.shuffle(img_files)
n_total = len(img_files)
n_train = int(n_total * SPLIT_RATIO['train'])
n_val = int(n_total * SPLIT_RATIO['val'])
n_test = n_total - n_train - n_val
splits = {
    'train': img_files[:n_train],
    'val': img_files[n_train:n_train+n_val],
    'test': img_files[n_train+n_val:]
}

# === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
print("\nüíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–æ—Ç–∞—Ü—ñ–π...")

for split, files in splits.items():
    for img_file in tqdm(files, desc=f"{split}"):
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ requests
        dst_path = os.path.join(OUTPUT_DIR, 'images', split, img_file)
        img_url = COCO_IMAGES_URL + img_file
        try:
            img_data = requests.get(img_url, timeout=10).content
            with open(dst_path, 'wb') as f:
                f.write(img_data)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {img_file}: {e}")

        # –∑–∞–ø–∏—Å–∞—Ç–∏ –∞–Ω–æ—Ç–∞—Ü—ñ—é
        label_file = img_file.replace('.jpg', '.txt')
        label_path = os.path.join(OUTPUT_DIR, 'labels', split, label_file)
        with open(label_path, 'w') as f:
            f.write('\n'.join(img_to_anns[img_file]))

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ. –ù–æ–≤–∏–π –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ 'coco_balanced_dataset/'")
